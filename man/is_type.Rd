% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predicates.R
\name{is_type}
\alias{is_type}
\alias{is_class}
\alias{is_natural}
\alias{is_number}
\alias{is_factor}
\alias{is_array}
\alias{is_matrix}
\alias{is_data_frame}
\title{Check the variable type & class}
\usage{
is_type(x, type, n = NULL)

is_class(x, class, n = NULL)

is_natural(x, n = NULL)

is_number(x, n = NULL)

is_factor(x, levels = NULL, n = NULL)

is_array(x, dims = NULL)

is_matrix(x, n_col = NULL, n_row = NULL)

is_data_frame(x, n_col = NULL, n_row = NULL)
}
\arguments{
\item{x}{(any) The object to test.}

\item{type}{(character) The allowed type.}

\item{n}{(integer, optional) The allowed length. If \code{NULL} the length is not
checked. Default: \code{NULL}.}

\item{class}{(character) The allowed class.}

\item{levels}{(character, optional) The allowed levels. If \code{NULL} the levels
are not checked. Default: \code{NULL}.}

\item{dims}{(integer, optional) The allowed dimension sizes. If \code{NULL} the
dimensions are not checked. Default: \code{NULL}.}

\item{n_col}{(integer, optional) The allowed number of columns. If \code{NULL} the
columns are not checked. Default: \code{NULL}.}

\item{n_row}{(integer, optional) The allowed number of rows. If \code{NULL} the
rows are not checked. Default: \code{NULL}.}
}
\value{
TRUE if x is a valid URL, FALSE otherwise
}
\description{
This function returns \code{TRUE} if the variable type is correct and \code{FALSE}
otherwise. Depending on the type, a number of other attributes can be checked
simultaneously, such as length, using \code{n}, or size of rows and columns, using
\code{n_row} and \code{n_col} respectively.
}
\details{
The following types can be checked:
\itemize{
\item \code{is_type()}: 'x"' must have type \code{type} and optionally length \code{n}.
\item \code{is_class()}: 'x"' must have class \code{class} and optionally length \code{n}.
\item \code{is_natural()}: 'x' must be a positive integer vector and optionally length
\code{n}.
\item \code{is_number()}: 'x' must be a numeric vector and optionally length \code{n}.
\item \code{is_factor()}: 'x' must be a factor vector and optionally length \code{n}.
\item \code{is_array()}: 'x' must be an array and optionally have dimension size
\code{dims}.
\item \code{is_matrix()}: 'x' must be a matrix and optionally have number of columns
\code{n_col} and number of rows \code{n_row}.
\item \code{is_data_frame()}: 'x' must be a data.frame and optionally have number of
columns \code{n_col} and number of rows \code{n_row}.
}
}
\examples{

# TRUE
is_type(1:3, "integer")
is_type(data.frame(a = 1:26, b = letters), "list")
is_type(1:3, "integer", n = 3)
# FALSE
is_type(data.frame(a = 1:26, b = letters), "data.frame")
is_type(1:3, "integer", n = 1)

# TRUE
is_class(1:3, "integer")
is_class(data.frame(a = 1:26, b = letters), "data.frame")
is_class(1:3, "integer", n = 3)
# FALSE
is_class(data.frame(a = 1:26, b = letters), "list")
is_class(1:3, "integer", n = 1)

# TRUE
is_natural(1:3)
is_natural(c(1.0, 2.0))
is_natural(1:3, n = 3)
# FALSE
is_natural(-1:-3)
is_natural(3.142)
is_natural(1:3, n = 1)

# TRUE
is_number(1:3)
is_number(c(1.2, 2.4))
is_number(1:3, n = 3)
# FALSE
is_number("text")
is_number(1:3, n = 1)

# TRUE
is_factor(factor(c("a", "b", "a")))
is_factor(factor(c("a", "b", "a")), n = 3)
is_factor(factor(c("a", "b", "a")), levels = c("a", "b"))
# FALSE
is_factor(1:3)
is_factor(factor(c("a", "b", "a")), n = 1)
is_factor(factor(c("a", "b", "a")), levels = c("A", "B"))

# TRUE
is_array(array(1:3))
is_array(array(1:12, dim = c(3, 4)))
is_array(array(1:12, dim = c(3, 4)), dims = c(3, 4))
# FALSE
is_array(1:3)
is_array(array(1:12, dim = c(3, 4)), dims = c(4, 3))

# TRUE
is_matrix(matrix(1:3))
is_matrix(matrix(1:12, nrow = 3, ncol = 4), n_col = 4)
is_matrix(matrix(1:12, nrow = 3, ncol = 4), n_row = 3)
# FALSE
is_matrix(1:3)
is_matrix(matrix(1:12, nrow = 3, ncol = 4), n_col = 3)
is_matrix(matrix(1:12, nrow = 3, ncol = 4), n_row = 4)

# TRUE
is_data_frame(data.frame(a = 1:26, b = letters))
is_data_frame(data.frame(a = 1:26, b = letters), n_col = 2)
is_data_frame(data.frame(a = 1:26, b = letters), n_row = 26)
# FALSE
is_data_frame(list(a = 1:26, b = letters))
is_data_frame(data.frame(a = 1:26, b = letters), n_col = 5)
is_data_frame(data.frame(a = 1:26, b = letters), n_row = 5)

}
\seealso{
\code{\link[rlang:type-predicates]{rlang::is_null()}}, \code{\link[rlang:type-predicates]{rlang::is_atomic()}}, \code{\link[rlang:type-predicates]{rlang::is_vector()}},
\code{\link[rlang:type-predicates]{rlang::is_logical()}}, \code{\link[rlang:type-predicates]{rlang::is_integer()}}, \code{\link[rlang:type-predicates]{rlang::is_double()}},
\code{\link[rlang:type-predicates]{rlang::is_character()}}, \code{\link[rlang:type-predicates]{rlang::is_raw()}}, \code{\link[rlang:type-predicates]{rlang::is_bytes()}},
\code{\link[rlang:type-predicates]{rlang::is_list()}}
}
