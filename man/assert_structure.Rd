% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert.R
\name{assert_empty}
\alias{assert_empty}
\alias{assert_names}
\alias{assert_length}
\title{Display an error if not the correct structure}
\usage{
assert_empty(
  x,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_names(
  x,
  names = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_length(
  x,
  n = NULL,
  n_min = NULL,
  n_max = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)
}
\arguments{
\item{x}{(any) The object to test.}

\item{level}{(integer, optional) The level of the message, from 1 to 10.
Default: 1.}

\item{msg_level}{(integer, optional) The maximum level of messages to output.
Default: set in the option \code{"msgr.level"}.}

\item{msg_types}{(character, optional) The type to write or display. Must
either NULL or one or more from "INFO", "WARNING" or "ERROR". Default: set
in the option \code{"msgr.types"}.}

\item{log_path}{(character, optional) The file path to the text log file. If
set to "", then no logs are written. Default: set in the option
\code{"msgr.log_path"}.}

\item{names}{(character) The allowed names.}

\item{n}{(integer, optional) The allowed length.}

\item{n_min}{(integer, optional) The minimum allowed length.}

\item{n_max}{(integer, optional) The maximum allowed length.}
}
\value{
If assertion passes then \code{TRUE} is returned. This allows you to make
multiple assertions separated by \code{&}.
}
\description{
This function calls the \code{\link[=error]{error()}} function to display an error if the
structure of the input is not correct.
}
\details{
The following structures can be checked:
\itemize{
\item \code{assert_empty()}: 'x' must be empty or \code{NULL}.
\item \code{assert_names()}: 'x' must have names and optionally have the specified
\code{names}.
\item \code{assert_length()}: 'x' must have valid length. You can specify the exact
length using \code{n} or the minimum and/or maximum length using \code{n_min} and
\code{n_max} respectively.
}
}
\examples{
\dontrun{

# No error
assert_empty(NULL)
assert_empty(integer())
# Error
assert_empty(1)

# No error
assert_names(c(name = "Bob", age = 42))
assert_names(c(name = "Bob", age = 42), names = c("name", "age"))
# Error
assert_names(c(name = "Bob", age = 42), names = c("name", "email"))

# No error
assert_length(1:3, n = 3)
assert_length(1:3, n_min = 1)
assert_length(1:3, n_min = 1, n_max = 10)
# Error
assert_length(1:3, n = 1)
assert_length(1:3, n_min = 5)
assert_length(1:3, n_min = 1, n_max = 2)

}

}
