% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert.R
\name{assert_type}
\alias{assert_type}
\alias{assert_class}
\alias{assert_null}
\alias{assert_atomic}
\alias{assert_vector}
\alias{assert_logical}
\alias{assert_integer}
\alias{assert_natural}
\alias{assert_double}
\alias{assert_number}
\alias{assert_character}
\alias{assert_factor}
\alias{assert_list}
\alias{assert_array}
\alias{assert_matrix}
\alias{assert_data_frame}
\alias{assert_function}
\alias{assert_formula}
\title{Display an error if not the correct type}
\usage{
assert_type(
  x,
  type,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_class(
  x,
  class,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_null(
  x,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_atomic(
  x,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_vector(
  x,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_logical(
  x,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_integer(
  x,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_natural(
  x,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_double(
  x,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_number(
  x,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_character(
  x,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_factor(
  x,
  levels = NULL,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_list(
  x,
  n = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_array(
  x,
  dims = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_matrix(
  x,
  n_col = NULL,
  n_row = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_data_frame(
  x,
  n_col = NULL,
  n_row = NULL,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_function(
  x,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)

assert_formula(
  x,
  level = 1,
  msg_level = getOption("msgr.level"),
  msg_types = getOption("msgr.types"),
  log_path = getOption("msgr.log_path")
)
}
\arguments{
\item{x}{(any) The object to test.}

\item{type}{(character) The allowed type.}

\item{n}{(integer, optional) The allowed length. If \code{NULL} the length is not
checked. Default: \code{NULL}.}

\item{level}{(integer, optional) The level of the message, from 1 to 10.
Default: 1.}

\item{msg_level}{(integer, optional) The maximum level of messages to output.
Default: set in the option \code{"msgr.level"}.}

\item{msg_types}{(character, optional) The type to write or display. Must
either NULL or one or more from "INFO", "WARNING" or "ERROR". Default: set
in the option \code{"msgr.types"}.}

\item{log_path}{(character, optional) The file path to the text log file. If
set to "", then no logs are written. Default: set in the option
\code{"msgr.log_path"}.}

\item{class}{(character) The allowed class.}

\item{levels}{(character, optional) The allowed levels. If \code{NULL} the levels
are not checked. Default: \code{NULL}.}

\item{dims}{(integer, optional) The allowed dimension sizes. If \code{NULL} the
dimensions are not checked. Default: \code{NULL}.}

\item{n_col}{(integer, optional) The allowed number of columns. If \code{NULL} the
columns are not checked. Default: \code{NULL}.}

\item{n_row}{(integer, optional) The allowed number of rows. If \code{NULL} the
rows are not checked. Default: \code{NULL}.}
}
\value{
If assertion passes then \code{TRUE} is returned. This allows you to make
multiple assertions separated by \code{&}.
}
\description{
This function calls the \code{\link[=error]{error()}} function to display an error if the
variable type of the input is not correct. Depending on the type, a number of
other attributes can be checked simultaneously, such as length, using \code{n}, or
size of rows and columns, using \code{n_row} and \code{n_col} respectively.
}
\details{
The following types can be checked:
\itemize{
\item \code{assert_type()}: 'x"' must have type \code{type} and optionally length \code{n}.
\item \code{assert_class()}: 'x"' must have class \code{class} and optionally length \code{n}.
\item \code{assert_null()}: 'x' must be \code{NULL}
\item \code{assert_atomic()}: 'x' must be an atomic vector and optionally length \code{n}.
\item \code{assert_vector()}: 'x' must be a vector and optionally length \code{n}.
\item \code{assert_logical()}: 'x' must be a logical vector and optionally length \code{n}.
\item \code{assert_integer()}: 'x' must be an integer vector and optionally length
\code{n}.
\item \code{assert_natural()}: 'x' must be a positive integer vector and optionally
length \code{n}.
\item \code{assert_double()}: 'x' must be a double vector and optionally length \code{n}.
\item \code{assert_number()}: 'x' must be a numeric vector and optionally length \code{n}.
\item \code{assert_character()}: 'x' must be a character vector and optionally length
\code{n}.
\item \code{assert_factor()}: 'x' must be a factor vector and optionally length \code{n}.
\item \code{assert_list()}: 'x' must be a list and optionally length \code{n}.
\item \code{assert_array()}: 'x' must be an array and optionally have dimension sizes
\code{dims}.
\item \code{assert_matrix()}: 'x' must be a matrix and optionally have number of
columns \code{n_col} and number of rows \code{n_row}.
\item \code{assert_data_frame()}: 'x' must be a data.frame and optionally have number
of columns \code{n_col} and number of rows \code{n_row}.
\item \code{assert_function()}: 'x' must be a function
\item \code{assert_formula()}: 'x' must be a formula
}
}
\examples{
\dontrun{

# No error
assert_type(data.frame(x = 1:3), "list")
assert_type(list(1, 2, 3), "list", n = 3)
# Error
assert_type(1:3, "list")
assert_type(1:3, "integer", n = 1)

# No error
assert_class(data.frame(x = 1:3), "data.frame")
assert_class(list(1, 2, 3), "list", n = 3)
# Error
assert_class(data.frame(x = 1:3), "list")
assert_class(1:3, "integer", n = 1)

# No error
assert_null(NULL)
# Error
assert_null(1)

# No error
assert_atomic(1:3)
assert_atomic(1:3, n = 3)
# Error
assert_atomic(list(1))
assert_atomic(1:3, n = 1)

# No error
assert_vector(1:3)
assert_vector(1:3, n = 3)
# Error
assert_vector(options)
assert_vector(1:3, n = 1)

# No error
assert_logical(TRUE)
assert_logical(c(TRUE, FALSE, TRUE), n = 3)
# Error
assert_logical(1)
assert_logical(c(TRUE, FALSE, TRUE), n = 1)

# No error
assert_integer(1:3)
assert_integer(1:3, n = 3)
# Error
assert_integer(c(1.414, 3.142))
assert_integer(1:3, n = 1)

# No error
assert_natural(c(1, 2, 3))
assert_natural(1:3, n = 3)
# Error
assert_natural(-1:3)
assert_natural(c(1.414, 3.142))
assert_natural(1:3, n = 1)

# No error
assert_double(c(1.414, 1.732, 2.000))
assert_double(c(1.414, 1.732, 2.000), n = 3)
# Error
assert_double(c("A", "B", "C"))
assert_double(c(1.414, 1.732, 2.000), n = 1)

# No error
assert_number(c(1.414, 1.732, 2.000))
assert_number(c(1.414, 1.732, 2.000), n = 3)
# Error
assert_number(c("A", "B", "C"))
assert_number(c(1.414, 1.732, 2.000), n = 1)

# No error
assert_character(c("A", "B", "C"))
assert_character(c("A", "B", "C"), n = 3)
# Error
assert_character(1:3)
assert_character(c("A", "B", "C"), n = 1)

# No error
assert_factor(factor(c("A", "B", "A")))
assert_factor(factor(c("A", "B", "A")), n = 3)
assert_factor(factor(c("A", "B", "A")), levels = c("A", "B"))
# Error
assert_factor(1:3)
assert_factor(factor(c("A", "B", "A")), n = 1)
assert_factor(factor(c("A", "B", "A")), levels = c("B", "C"))

# No error
assert_list(list(1, 2, 3))
assert_list(list(1, 2, 3), n = 3)
# Error
assert_list(c(1, 2, 3))
assert_list(list(1, 2, 3), n = 1)

# No error
assert_data_frame(data.frame(x = 1:26, y = LETTERS))
assert_data_frame(data.frame(x = 1:26, y = LETTERS), n_col = 2)
assert_data_frame(data.frame(x = 1:26, y = LETTERS), n_row = 26)
assert_data_frame(data.frame(x = 1:26, y = LETTERS), n_col = 2, n_row = 26)
# Error
assert_data_frame(list(x = 1:26, y = LETTERS))
assert_data_frame(data.frame(x = 1:26, y = LETTERS), n_col = 1)
assert_data_frame(data.frame(x = 1:26, y = LETTERS), n_row = 10)
assert_data_frame(data.frame(x = 1:26, y = LETTERS), n_col = 1, n_row = 10)

# No error
assert_function(options)
# Error
assert_function(1:3)

# No error
assert_formula(x ~ 1)
# Error
assert_formula(x == 1)

}

}
